[main]
report_error/remember_token = True

[update_manager]
check_stable_only = False

[statusbar]
memory_usage/enable = False

[main_interpreter]
default = False
custom = True
umr/verbose = False
umr/namelist = ['numpy', 'scipy']

[ipython_console]
pylab/backend = qt
autoreload = False

[debugger]
pdb_ignore_lib = True

[editor]
indent_guides = True
scroll_past_end = True
automatic_completions = False
automatic_completions_after_chars = 3
completions_hint = False
completions_hint_after_ms = 1500
always_remove_trailing_spaces = True
add_newline = True
always_remove_trailing_newlines = True

[historylog]
wrap = False
line_numbers = True

[outline_explorer]
group_cells = False

[find_in_files]
exclude = ['*.csv, *.dat, *.log, *.tmp, *.bak, *.orig, *.pot, *.po, build/, dist/, kite/, *.js, *.ipynb, *.mo, *.md']
more_options = True

[completions]
provider_configuration = {'fallback': {'version': '0.1.0', 'values': {}, 'defaults': {}}, 'lsp': {'version': '0.2.0', 'values': {'enable_hover_hints': False, 'show_lsp_down_warning': True, 'code_completion': True, 'jedi_definition': True, 'jedi_definition/follow_imports': True, 'jedi_signature_help': False, 'preload_modules': 'numpy, scipy, sympy, pandas, networkx, statsmodels, matplotlib, sklearn, skimage, mpmath, os, pillow, OpenGL, array, audioop, binascii, cPickle, cStringIO, cmath, collections, datetime, errno, exceptions, gc, importlib, itertools, math, mmap, msvcrt, nt, operator, ast, signal, sys, threading, time, wx, zipimport, zlib, pytest, PyQt4, PyQt5, PySide, PySide2, os.path', 'pyflakes': True, 'mccabe': False, 'formatting': 'black', 'format_on_save': False, 'pycodestyle': True, 'pycodestyle/filename': '', 'pycodestyle/exclude': '', 'pycodestyle/select': '', 'pycodestyle/ignore': '', 'pycodestyle/max_line_length': 100, 'pydocstyle': False, 'pydocstyle/convention': 'numpy', 'pydocstyle/select': '', 'pydocstyle/ignore': '', 'pydocstyle/match': '(?!test_).*\\.py', 'pydocstyle/match_dir': '[^\\.].*', 'advanced/enabled': False, 'advanced/module': 'pylsp', 'advanced/host': '127.0.0.1', 'advanced/port': 2087, 'advanced/external': False, 'advanced/stdio': False}, 'defaults': {'enable_hover_hints': True, 'show_lsp_down_warning': True, 'code_completion': True, 'jedi_definition': True, 'jedi_definition/follow_imports': True, 'jedi_signature_help': True, 'preload_modules': 'numpy, scipy, sympy, pandas, networkx, statsmodels, matplotlib, sklearn, skimage, mpmath, os, pillow, OpenGL, array, audioop, binascii, cPickle, cStringIO, cmath, collections, datetime, errno, exceptions, gc, importlib, itertools, math, mmap, msvcrt, nt, operator, ast, signal, sys, threading, time, wx, zipimport, zlib, pytest, PyQt4, PyQt5, PySide, PySide2, os.path', 'pyflakes': True, 'mccabe': False, 'formatting': 'autopep8', 'format_on_save': False, 'pycodestyle': False, 'pycodestyle/filename': '', 'pycodestyle/exclude': '', 'pycodestyle/select': '', 'pycodestyle/ignore': '', 'pycodestyle/max_line_length': 79, 'pydocstyle': False, 'pydocstyle/convention': 'numpy', 'pydocstyle/select': '', 'pydocstyle/ignore': '', 'pydocstyle/match': '(?!test_).*\\.py', 'pydocstyle/match_dir': '[^\\.].*', 'advanced/enabled': False, 'advanced/module': 'pylsp', 'advanced/host': '127.0.0.1', 'advanced/port': 2087, 'advanced/external': False, 'advanced/stdio': False}}, 'snippets': {'version': '0.1.0', 'values': {'python': {'class': {'plain': {'text': 'class ${1:ClassName}:\n    def __init__(self, ${2:*args}, ${3:**kwargs}):\n        ${4:pass}$0', 'remove_trigger': False}, 'inheritance': {'text': 'class ${1:ClassName}($2):\n    def __init__(self, ${3:*args}, ${4:**kwargs}):\n        super().__init__(${5:*args}, ${6:**kwargs})$0', 'remove_trigger': False}}, 'def': {'method': {'text': 'def ${1:method_name}(self, ${2:*args}, ${3:**kwargs}):\n    ${4:pass}$0', 'remove_trigger': False}, 'function': {'text': 'def ${1:func_name}(${2:*args}, ${3:**kwargs}):\n    ${4:pass}$0', 'remove_trigger': False}}, 'for': {'range': {'text': 'for ${1:i} in range(${2:0}, ${3:n}):\n    ${4:pass}$0', 'remove_trigger': False}, 'iterator': {'text': 'for ${1:x} in ${2:iterator}:\n    ${3:pass}$0', 'remove_trigger': False}}, 'while': {'condition': {'text': 'while ${1:cond}:\n    ${2:pass}$0', 'remove_trigger': False}, 'infinite': {'text': 'while True:\n    ${1:pass}$0', 'remove_trigger': False}}, 'import': {'package': {'text': 'import ${1:package}$0', 'remove_trigger': False}, 'alias': {'text': 'import ${1:package} as ${2:alias}$0', 'remove_trigger': False}}, 'from': {'import': {'text': 'from ${1:package} import ${2:module}$0', 'remove_trigger': False}, 'alias': {'text': 'from ${1:package} import ${2:module} as ${3:alias}$0', 'remove_trigger': False}}, 'async': {'def': {'text': 'async def ${1:func_name}(${2:*args}, ${3:**kwargs}):\n    ${4:pass}$0', 'remove_trigger': False}, 'method': {'text': 'async def ${1:method_name}(self, ${2:*args}, ${3:**kwargs}):\n    ${4:pass}$0', 'remove_trigger': False}, 'for': {'text': 'async for ${1:x} in ${2:iterator}:\n    ${3:pass}$0', 'remove_trigger': False}}, 'try': {'except': {'text': '\ntry:\n    ${1:pass}\nexcept ${2:Exception}:\n    ${3:pass}$0\n', 'remove_trigger': False}, 'except alias': {'text': 'try:\n    ${1:pass}\nexcept ${2:Exception} as ${3:e}:\n    ${4:pass}$0', 'remove_trigger': False}, 'except/finally': {'text': 'try:\n    ${1:pass}\nexcept ${2:Exception}:\n    ${3:pass}\nfinally:\n    ${4:pass}$0', 'remove_trigger': False}, 'except alias/finally': {'text': 'try:\n    ${1:pass}\nexcept ${2:Exception} as ${3:e}:\n    ${4:pass}\nfinally:\n    ${5:pass}$0', 'remove_trigger': False}}, 'with': {'context': {'text': 'with ${1:context} as ${2:alias}:\n    ${3:pass}$0', 'remove_trigger': False}}, 'list': {'comprehension': {'text': '[${1:x} for ${2:x} in ${3:iterator}]$0', 'remove_trigger': True}, 'comprehension if': {'text': '[${1:x} for ${2:x} in ${3:iterator} if ${4:cond}]$0', 'remove_trigger': True}, 'comprehension if/else': {'text': '[${1:x} if ${2:cond} else ${3:other} for ${4:x} in ${5:iterator}]$0', 'remove_trigger': True}}, 'dict': {'comprehension': {'text': '{${1:key}:${2:value} for ${3:elem} in ${4:iterator}\\}$0', 'remove_trigger': True}, 'comprehension if': {'text': '{${1:key}:${2:value} for ${3:elem} in ${4:iterator} if ${5:cond}\\}$0', 'remove_trigger': True}}, 'set': {'comprehension': {'text': '{${1:elem} for ${2:elem} in ${3:iterator}\\}$0', 'remove_trigger': True}, 'comprehension if': {'text': '{${1:elem} for ${2:elem} in ${3:iterator} if ${4:cond}\\}$0', 'remove_trigger': True}, 'comprehension if/else': {'text': '{${1:elem} if ${2:cond} else ${3:other} for ${4:elem} in ${5:iterator}\\}$0', 'remove_trigger': True}}, 'pdb': {'set python debug point': {'text': 'import pdb; pdb.set_trace()\n', 'remove_trigger': True}}, 'pdbqt': {'set python debugger and disable qt callback': {'text': 'from PyQt5.QtCore import pyqtRemoveInputHook; pyqtRemoveInputHook()\nimport pdb; pdb.set_trace()\n', 'remove_trigger': True}}}}, 'defaults': {'python': {'class': {'plain': {'text': 'class ${1:ClassName}:\n    def __init__(self, ${2:*args}, ${3:**kwargs}):\n        ${4:pass}$0', 'remove_trigger': False}, 'inheritance': {'text': 'class ${1:ClassName}($2):\n    def __init__(self, ${3:*args}, ${4:**kwargs}):\n        super().__init__(${5:*args}, ${6:**kwargs})$0', 'remove_trigger': False}}, 'def': {'method': {'text': 'def ${1:method_name}(self, ${2:*args}, ${3:**kwargs}):\n    ${4:pass}$0', 'remove_trigger': False}, 'function': {'text': 'def ${1:func_name}(${2:*args}, ${3:**kwargs}):\n    ${4:pass}$0', 'remove_trigger': False}}, 'for': {'range': {'text': 'for ${1:i} in range(${2:0}, ${3:n}):\n    ${4:pass}$0', 'remove_trigger': False}, 'iterator': {'text': 'for ${1:x} in ${2:iterator}:\n    ${3:pass}$0', 'remove_trigger': False}}, 'while': {'condition': {'text': 'while ${1:cond}:\n    ${2:pass}$0', 'remove_trigger': False}, 'infinite': {'text': 'while True:\n    ${1:pass}$0', 'remove_trigger': False}}, 'import': {'package': {'text': 'import ${1:package}$0', 'remove_trigger': False}, 'alias': {'text': 'import ${1:package} as ${2:alias}$0', 'remove_trigger': False}}, 'from': {'import': {'text': 'from ${1:package} import ${2:module}$0', 'remove_trigger': False}, 'alias': {'text': 'from ${1:package} import ${2:module} as ${3:alias}$0', 'remove_trigger': False}}, 'async': {'def': {'text': 'async def ${1:func_name}(${2:*args}, ${3:**kwargs}):\n    ${4:pass}$0', 'remove_trigger': False}, 'method': {'text': 'async def ${1:method_name}(self, ${2:*args}, ${3:**kwargs}):\n    ${4:pass}$0', 'remove_trigger': False}, 'for': {'text': 'async for ${1:x} in ${2:iterator}:\n    ${3:pass}$0', 'remove_trigger': False}}, 'try': {'except': {'text': '\ntry:\n    ${1:pass}\nexcept ${2:Exception}:\n    ${3:pass}$0\n', 'remove_trigger': False}, 'except alias': {'text': 'try:\n    ${1:pass}\nexcept ${2:Exception} as ${3:e}:\n    ${4:pass}$0', 'remove_trigger': False}, 'except/finally': {'text': 'try:\n    ${1:pass}\nexcept ${2:Exception}:\n    ${3:pass}\nfinally:\n    ${4:pass}$0', 'remove_trigger': False}, 'except alias/finally': {'text': 'try:\n    ${1:pass}\nexcept ${2:Exception} as ${3:e}:\n    ${4:pass}\nfinally:\n    ${5:pass}$0', 'remove_trigger': False}}, 'with': {'context': {'text': 'with ${1:context} as ${2:alias}:\n    ${3:pass}$0', 'remove_trigger': False}}, 'list': {'comprehension': {'text': '[${1:x} for ${2:x} in ${3:iterator}]$0', 'remove_trigger': True}, 'comprehension if': {'text': '[${1:x} for ${2:x} in ${3:iterator} if ${4:cond}]$0', 'remove_trigger': True}, 'comprehension if/else': {'text': '[${1:x} if ${2:cond} else ${3:other} for ${4:x} in ${5:iterator}]$0', 'remove_trigger': True}}, 'dict': {'comprehension': {'text': '{${1:key}:${2:value} for ${3:elem} in ${4:iterator}\\}$0', 'remove_trigger': True}, 'comprehension if': {'text': '{${1:key}:${2:value} for ${3:elem} in ${4:iterator} if ${5:cond}\\}$0', 'remove_trigger': True}}, 'set': {'comprehension': {'text': '{${1:elem} for ${2:elem} in ${3:iterator}\\}$0', 'remove_trigger': True}, 'comprehension if': {'text': '{${1:elem} for ${2:elem} in ${3:iterator} if ${4:cond}\\}$0', 'remove_trigger': True}, 'comprehension if/else': {'text': '{${1:elem} if ${2:cond} else ${3:other} for ${4:elem} in ${5:iterator}\\}$0', 'remove_trigger': True}}}}}}

[shortcuts]
editor/toggle comment = Ctrl+/
editor/previous word = Alt+Left
editor/next word = Alt+Right
editor/start of document = Ctrl+PgUp
editor/end of document = Ctrl+PgDown
editor/go to previous file = Ctrl+Shift+[
editor/go to next file = Ctrl+Shift+]
editor/cycle to previous file =
editor/cycle to next file =
editor/previous cursor position = Alt+[
editor/next cursor position = Alt+]
editor/run cell =
ipython_console/clear shell = Ctrl+K
ipython_console/enter array table =

[appearance]
font/family = 'Hack'
monospace_app_font/family = Hack
